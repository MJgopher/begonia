// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: ast.go
// begonia client file

package call

import (
	"github.com/MashiroC/begonia"
	"github.com/MashiroC/begonia/app"
	appClient "github.com/MashiroC/begonia/app/client"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	testRegisterService appClient.Service

	_testRegisterServiceNull appClient.RemoteFunSync

	_testRegisterServiceNullInSchema = `
{
			"namespace":"begonia.func.Null",
			"type":"record",
			"name":"In",
			"fields":[
				
			]
		}`
	_testRegisterServiceNullOutSchema = `
{
			"namespace":"begonia.func.Null",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_testRegisterServiceNullInCoder  coding.Coder
	_testRegisterServiceNullOutCoder coding.Coder

	_testRegisterServiceOnlyInput appClient.RemoteFunSync

	_testRegisterServiceOnlyInputInSchema = `
{
			"namespace":"begonia.func.OnlyInput",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceOnlyInputOutSchema = `
{
			"namespace":"begonia.func.OnlyInput",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_testRegisterServiceOnlyInputInCoder  coding.Coder
	_testRegisterServiceOnlyInputOutCoder coding.Coder

	_testRegisterServiceOnlyOutput appClient.RemoteFunSync

	_testRegisterServiceOnlyOutputInSchema = `
{
			"namespace":"begonia.func.OnlyOutput",
			"type":"record",
			"name":"In",
			"fields":[
				
			]
		}`
	_testRegisterServiceOnlyOutputOutSchema = `
{
			"namespace":"begonia.func.OnlyOutput",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceOnlyOutputInCoder  coding.Coder
	_testRegisterServiceOnlyOutputOutCoder coding.Coder

	_testRegisterServiceBothInAndOut appClient.RemoteFunSync

	_testRegisterServiceBothInAndOutInSchema = `
{
			"namespace":"begonia.func.BothInAndOut",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceBothInAndOutOutSchema = `
{
			"namespace":"begonia.func.BothInAndOut",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"j"}

			]
		}`
	_testRegisterServiceBothInAndOutInCoder  coding.Coder
	_testRegisterServiceBothInAndOutOutCoder coding.Coder

	_testRegisterServiceOutWithError appClient.RemoteFunSync

	_testRegisterServiceOutWithErrorInSchema = `
{
			"namespace":"begonia.func.OutWithError",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceOutWithErrorOutSchema = `
{
			"namespace":"begonia.func.OutWithError",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"j"}

			]
		}`
	_testRegisterServiceOutWithErrorInCoder  coding.Coder
	_testRegisterServiceOutWithErrorOutCoder coding.Coder

	_testRegisterServiceOutWithContext appClient.RemoteFunSync

	_testRegisterServiceOutWithContextInSchema = `
{
			"namespace":"begonia.func.OutWithContext",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceOutWithContextOutSchema = `
{
			"namespace":"begonia.func.OutWithContext",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string","alias":"s"}

			]
		}`
	_testRegisterServiceOutWithContextInCoder  coding.Coder
	_testRegisterServiceOutWithContextOutCoder coding.Coder

	_testRegisterServiceOutWithErrorAndContext appClient.RemoteFunSync

	_testRegisterServiceOutWithErrorAndContextInSchema = `
{
			"namespace":"begonia.func.OutWithErrorAndContext",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i"}

			]
		}`
	_testRegisterServiceOutWithErrorAndContextOutSchema = `
{
			"namespace":"begonia.func.OutWithErrorAndContext",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"j"}

			]
		}`
	_testRegisterServiceOutWithErrorAndContextInCoder  coding.Coder
	_testRegisterServiceOutWithErrorAndContextOutCoder coding.Coder
)

type _testRegisterServiceNullIn struct {
}

type _testRegisterServiceNullOut struct {
}

type _testRegisterServiceOnlyInputIn struct {
	F1 int
}

type _testRegisterServiceOnlyInputOut struct {
}

type _testRegisterServiceOnlyOutputIn struct {
}

type _testRegisterServiceOnlyOutputOut struct {
	F1 int
}

type _testRegisterServiceBothInAndOutIn struct {
	F1 int
}

type _testRegisterServiceBothInAndOutOut struct {
	F1 int
}

type _testRegisterServiceOutWithErrorIn struct {
	F1 int
}

type _testRegisterServiceOutWithErrorOut struct {
	F1 int
}

type _testRegisterServiceOutWithContextIn struct {
	F1 int
}

type _testRegisterServiceOutWithContextOut struct {
	F1 string
}

type _testRegisterServiceOutWithErrorAndContextIn struct {
	F1 int
}

type _testRegisterServiceOutWithErrorAndContextOut struct {
	F1 int
}

func Init() {
	BegoniaCli = begonia.NewClientWithAst()

	app.ServiceAppMode = app.Ast

	bService, err := BegoniaCli.Service("test")
	if err != nil {
		panic(err)
	}

	_testRegisterServiceNull, err = bService.FuncSync("Null")

	_testRegisterServiceNullInCoder, err = coding.NewAvro(_testRegisterServiceNullInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceNullOutCoder, err = coding.NewAvro(_testRegisterServiceNullOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceOnlyInput, err = bService.FuncSync("OnlyInput")

	_testRegisterServiceOnlyInputInCoder, err = coding.NewAvro(_testRegisterServiceOnlyInputInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceOnlyInputOutCoder, err = coding.NewAvro(_testRegisterServiceOnlyInputOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceOnlyOutput, err = bService.FuncSync("OnlyOutput")

	_testRegisterServiceOnlyOutputInCoder, err = coding.NewAvro(_testRegisterServiceOnlyOutputInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceOnlyOutputOutCoder, err = coding.NewAvro(_testRegisterServiceOnlyOutputOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceBothInAndOut, err = bService.FuncSync("BothInAndOut")

	_testRegisterServiceBothInAndOutInCoder, err = coding.NewAvro(_testRegisterServiceBothInAndOutInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceBothInAndOutOutCoder, err = coding.NewAvro(_testRegisterServiceBothInAndOutOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceOutWithError, err = bService.FuncSync("OutWithError")

	_testRegisterServiceOutWithErrorInCoder, err = coding.NewAvro(_testRegisterServiceOutWithErrorInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceOutWithErrorOutCoder, err = coding.NewAvro(_testRegisterServiceOutWithErrorOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceOutWithContext, err = bService.FuncSync("OutWithContext")

	_testRegisterServiceOutWithContextInCoder, err = coding.NewAvro(_testRegisterServiceOutWithContextInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceOutWithContextOutCoder, err = coding.NewAvro(_testRegisterServiceOutWithContextOutSchema)
	if err != nil {
		panic(err)
	}

	_testRegisterServiceOutWithErrorAndContext, err = bService.FuncSync("OutWithErrorAndContext")

	_testRegisterServiceOutWithErrorAndContextInCoder, err = coding.NewAvro(_testRegisterServiceOutWithErrorAndContextInSchema)
	if err != nil {
		panic(err)
	}
	_testRegisterServiceOutWithErrorAndContextOutCoder, err = coding.NewAvro(_testRegisterServiceOutWithErrorAndContextOutSchema)
	if err != nil {
		panic(err)
	}

}

func Null() (err error) {
	var in _testRegisterServiceNullIn

	b, err := _testRegisterServiceNullInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceNull(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceNullOut
	err = _testRegisterServiceNullOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	return
}

func OnlyInput(i int) (err error) {
	var in _testRegisterServiceOnlyInputIn
	in.F1 = i

	b, err := _testRegisterServiceOnlyInputInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceOnlyInput(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceOnlyInputOut
	err = _testRegisterServiceOnlyInputOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	return
}

func OnlyOutput() (i int, err error) {
	var in _testRegisterServiceOnlyOutputIn

	b, err := _testRegisterServiceOnlyOutputInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceOnlyOutput(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceOnlyOutputOut
	err = _testRegisterServiceOnlyOutputOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	i = out.F1

	return
}

func BothInAndOut(i int) (j int, err error) {
	var in _testRegisterServiceBothInAndOutIn
	in.F1 = i

	b, err := _testRegisterServiceBothInAndOutInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceBothInAndOut(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceBothInAndOutOut
	err = _testRegisterServiceBothInAndOutOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	j = out.F1

	return
}

func OutWithError(i int) (j int, err error) {
	var in _testRegisterServiceOutWithErrorIn
	in.F1 = i

	b, err := _testRegisterServiceOutWithErrorInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceOutWithError(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceOutWithErrorOut
	err = _testRegisterServiceOutWithErrorOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	j = out.F1

	return
}

func OutWithContext(i int) (s string, err error) {
	var in _testRegisterServiceOutWithContextIn
	in.F1 = i

	b, err := _testRegisterServiceOutWithContextInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceOutWithContext(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceOutWithContextOut
	err = _testRegisterServiceOutWithContextOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	s = out.F1

	return
}

func OutWithErrorAndContext(i int) (j int, err error) {
	var in _testRegisterServiceOutWithErrorAndContextIn
	in.F1 = i

	b, err := _testRegisterServiceOutWithErrorAndContextInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _testRegisterServiceOutWithErrorAndContext(b)
	if err != nil {
		return
	}

	var out _testRegisterServiceOutWithErrorAndContextOut
	err = _testRegisterServiceOutWithErrorAndContextOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	j = out.F1

	return
}
