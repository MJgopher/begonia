// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: example\service\service.go

package main

import (
	"errors"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	_EchoServiceFuncList []coding.FunInfo

	_EchoServiceSayHelloInSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_EchoServiceSayHelloOutSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_EchoServiceSayHelloInCoder  coding.Coder
	_EchoServiceSayHelloOutCoder coding.Coder

	_EchoServiceSayHello2InSchema = `
{
			"namespace":"begonia.func.SayHello2",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_EchoServiceSayHello2OutSchema = `
{
			"namespace":"begonia.func.SayHello2",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}
,{"name":"F1","type":["string","null"]}

			]
		}`
	_EchoServiceSayHello2InCoder  coding.Coder
	_EchoServiceSayHello2OutCoder coding.Coder
)

type _EchoServiceSayHelloIn struct {
	F1 string
}

type _EchoServiceSayHelloOut struct {
	F1 string
}

type _EchoServiceSayHello2In struct {
	F1 string
}

type _EchoServiceSayHello2Out struct {
	F1 string
}

func init() {
	var err error

	_EchoServiceSayHelloInCoder, err = coding.NewAvro(_EchoServiceSayHelloInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceSayHelloOutCoder, err = coding.NewAvro(_EchoServiceSayHelloOutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceSayHello2InCoder, err = coding.NewAvro(_EchoServiceSayHello2InSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceSayHello2OutCoder, err = coding.NewAvro(_EchoServiceSayHello2OutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceFuncList = []coding.FunInfo{

		{
			Name:      "SayHello",
			Mode:      "avro",
			InSchema:  _EchoServiceSayHelloInSchema,
			OutSchema: _EchoServiceSayHelloOutSchema},

		{
			Name:      "SayHello2",
			Mode:      "avro",
			InSchema:  _EchoServiceSayHello2InSchema,
			OutSchema: _EchoServiceSayHello2OutSchema},
	}
}

func (d *EchoService) Do(fun string, param []byte) (result []byte, err error) {
	switch fun {

	case "SayHello":
		var in _EchoServiceSayHelloIn
		err := _EchoServiceSayHelloInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1 := d.SayHello(
			in.F1,
		)
		if err != nil {
			return nil, err
		}
		var out _EchoServiceSayHelloOut
		out.F1 = res1

		res, err := _EchoServiceSayHelloOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	case "SayHello2":
		var in _EchoServiceSayHello2In
		err := _EchoServiceSayHello2InCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1, err := d.SayHello2(
			in.F1,
		)
		if err != nil {
			return nil, err
		}
		var out _EchoServiceSayHello2Out
		out.F1 = res1

		res, err := _EchoServiceSayHello2OutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	default:
		err = errors.New("rpc call error: fun not exist")
	}
	return
}

func (d *EchoService) FuncList() []coding.FunInfo {
	return _EchoServiceFuncList
}
