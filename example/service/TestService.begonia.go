// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: example\service\service.go

package main

import (
	"errors"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	_TestServiceFuncList []coding.FunInfo

	_TestServiceEchoInSchema = `
{
			"namespace":"begonia.func.Echo",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int"}
,{"name":"F2","type":"int"}
,{"name":"F3","type":"int"}
,{"name":"F4","type":"int"}
,{"name":"F5","type":"long"}
,{"name":"F6","type":"float"}
,{"name":"F7","type":"double"}
,{"name":"F8","type":"boolean"}
,{"name":"F9","type":"string"}
,{"name":"F10","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"F11","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"F12","type":"bytes"}
,{"name":"F13","type":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"asd","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}}
,{"name":"F14","type":{"type":"map","values":"string"}}
,{"name":"F15","type":{"type":"map","values":"int"}}
,{"name":"F16","type":{"type":"map","values":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"asd","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}}}

			]
		}`
	_TestServiceEchoOutSchema = `
{
			"namespace":"begonia.func.Echo",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_TestServiceEchoInCoder  coding.Coder
	_TestServiceEchoOutCoder coding.Coder

	_TestServiceEcho2InSchema = `
{
			"namespace":"begonia.func.Echo2",
			"type":"record",
			"name":"In",
			"fields":[
				
			]
		}`
	_TestServiceEcho2OutSchema = `
{
			"namespace":"begonia.func.Echo2",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int"}
,{"name":"F2","type":"int"}
,{"name":"F3","type":"int"}
,{"name":"F4","type":"int"}
,{"name":"F5","type":"long"}
,{"name":"F6","type":"float"}
,{"name":"F7","type":"double"}
,{"name":"F8","type":"boolean"}
,{"name":"F9","type":"string"}
,{"name":"F10","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"F11","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"F12","type":"bytes"}
,{"name":"F13","type":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"asd","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}}
,{"name":"F14","type":{"type":"map","values":"string"}}
,{"name":"F15","type":{"type":"map","values":"int"}}
,{"name":"F16","type":{"type":"map","values":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"asd","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}}}

			]
		}`
	_TestServiceEcho2InCoder  coding.Coder
	_TestServiceEcho2OutCoder coding.Coder
)

type _TestServiceEchoIn struct {
	F1  int
	F2  int8
	F3  int16
	F4  int32
	F5  int64
	F6  float32
	F7  float64
	F8  bool
	F9  string
	F10 []int
	F11 []string
	F12 []byte
	F13 TestStruct
	F14 map[string]string
	F15 map[string]int
	F16 map[string]TestStruct
}

type _TestServiceEchoOut struct {
	F1 string
}

type _TestServiceEcho2In struct {
}

type _TestServiceEcho2Out struct {
	F1  int
	F2  int8
	F3  int16
	F4  int32
	F5  int64
	F6  float32
	F7  float64
	F8  bool
	F9  string
	F10 []int
	F11 []string
	F12 []byte
	F13 TestStruct
	F14 map[string]string
	F15 map[string]int
	F16 map[string]TestStruct
}

func init() {
	var err error

	_TestServiceEchoInCoder, err = coding.NewAvro(_TestServiceEchoInSchema)
	if err != nil {
		panic(err)
	}
	_TestServiceEchoOutCoder, err = coding.NewAvro(_TestServiceEchoOutSchema)
	if err != nil {
		panic(err)
	}

	_TestServiceEcho2InCoder, err = coding.NewAvro(_TestServiceEcho2InSchema)
	if err != nil {
		panic(err)
	}
	_TestServiceEcho2OutCoder, err = coding.NewAvro(_TestServiceEcho2OutSchema)
	if err != nil {
		panic(err)
	}

	_TestServiceFuncList = []coding.FunInfo{

		{
			Name:      "Echo",
			Mode:      "avro",
			InSchema:  _TestServiceEchoInSchema,
			OutSchema: _TestServiceEchoOutSchema},

		{
			Name:      "Echo2",
			Mode:      "avro",
			InSchema:  _TestServiceEcho2InSchema,
			OutSchema: _TestServiceEcho2OutSchema},
	}
}

func (d *TestService) Do(fun string, param []byte) (result []byte, err error) {
	switch fun {

	case "Echo":
		var in _TestServiceEchoIn
		err := _TestServiceEchoInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1 := d.Echo(
			in.F1, in.F2, in.F3, in.F4, in.F5, in.F6, in.F7, in.F8, in.F9, in.F10, in.F11, in.F12, in.F13, in.F14, in.F15, in.F16,
		)
		if err != nil {
			return nil, err
		}
		var out _TestServiceEchoOut
		out.F1 = res1

		res, err := _TestServiceEchoOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	case "Echo2":
		var in _TestServiceEcho2In
		err := _TestServiceEcho2InCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}

		res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15, res16 := d.Echo2()
		if err != nil {
			return nil, err
		}
		var out _TestServiceEcho2Out
		out.F1 = res1
		out.F2 = res2
		out.F3 = res3
		out.F4 = res4
		out.F5 = res5
		out.F6 = res6
		out.F7 = res7
		out.F8 = res8
		out.F9 = res9
		out.F10 = res10
		out.F11 = res11
		out.F12 = res12
		out.F13 = res13
		out.F14 = res14
		out.F15 = res15
		out.F16 = res16

		res, err := _TestServiceEcho2OutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil

	default:
		err = errors.New("rpc call error: fun not exist")
	}
	return
}

func (d *TestService) FuncList() []coding.FunInfo {
	return _TestServiceFuncList
}
