// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: example\server\server.go
// begonia client file

package call

import (
	"github.com/MashiroC/begonia/app"
	appClient "github.com/MashiroC/begonia/app/client"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	TestServiceService appClient.Service

	_TestServiceServiceEcho appClient.RemoteFunSync

	_TestServiceServiceEchoInSchema = `
{
			"namespace":"begonia.func.Echo",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i1"}
,{"name":"F2","type":"int","alias":"it"}
,{"name":"F3","type":"int","alias":"i2"}
,{"name":"F4","type":"int","alias":"i3"}
,{"name":"F5","type":"int","alias":"i4"}
,{"name":"F6","type":"long","alias":"i5"}
,{"name":"F7","type":"float","alias":"f1"}
,{"name":"F8","type":"double","alias":"f2"}
,{"name":"F9","type":"boolean","alias":"ok"}
,{"name":"F10","type":"string","alias":"str"}
,{"name":"F11","type":{
				"type": "array",
				"items": "int"
			},"alias":"s1"}
,{"name":"F12","type":{
				"type": "array",
				"items": "string"
			},"alias":"s2"}
,{"name":"F13","type":"bytes","alias":"s6"}
,{"name":"F14","type":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"TestStruct2","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			},"alias":"st"}
,{"name":"F15","type":{"type":"map","values":"string"},"alias":"m1"}
,{"name":"F16","type":{"type":"map","values":"int"},"alias":"m2"}
,{"name":"F17","type":{"type":"map","values":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"TestStruct2","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}},"alias":"m3"}

			]
		}`
	_TestServiceServiceEchoOutSchema = `
{
			"namespace":"begonia.func.Echo",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_TestServiceServiceEchoInCoder  coding.Coder
	_TestServiceServiceEchoOutCoder coding.Coder

	_TestServiceServiceEcho2 appClient.RemoteFunSync

	_TestServiceServiceEcho2InSchema = `
{
			"namespace":"begonia.func.Echo2",
			"type":"record",
			"name":"In",
			"fields":[
				
			]
		}`
	_TestServiceServiceEcho2OutSchema = `
{
			"namespace":"begonia.func.Echo2",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"i1"}
,{"name":"F2","type":"int","alias":"i2"}
,{"name":"F3","type":"int","alias":"i3"}
,{"name":"F4","type":"int","alias":"i4"}
,{"name":"F5","type":"long","alias":"i5"}
,{"name":"F6","type":"float","alias":"f1"}
,{"name":"F7","type":"double","alias":"f2"}
,{"name":"F8","type":"boolean","alias":"ok"}
,{"name":"F9","type":"string","alias":"str"}
,{"name":"F10","type":{
				"type": "array",
				"items": "int"
			},"alias":"s1"}
,{"name":"F11","type":{
				"type": "array",
				"items": "string"
			},"alias":"s2"}
,{"name":"F12","type":"bytes","alias":"s6"}
,{"name":"F13","type":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"TestStruct2","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			},"alias":"st"}
,{"name":"F14","type":{"type":"map","values":"string"},"alias":"m1"}
,{"name":"F15","type":{"type":"map","values":"int"},"alias":"m2"}
,{"name":"F16","type":{"type":"map","values":{
				"type": "record",
				"name": "TestStruct",
				"fields":[{"name":"I1","type":"int"}
,{"name":"I2","type":"int"}
,{"name":"I3","type":"int"}
,{"name":"I4","type":"int"}
,{"name":"I5","type":"long"}
,{"name":"Str","type":"string"}
,{"name":"S1","type":{
				"type": "array",
				"items": "int"
			}}
,{"name":"S2","type":{
				"type": "array",
				"items": "string"
			}}
,{"name":"TestStruct2","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Test3","type":{
				"type": "record",
				"name": "TestStruct2",
				"fields":[{"name":"B1","type":"bytes"}
,{"name":"B2","type":"bytes"}

				]
			}}
,{"name":"Map1","type":{"type":"map","values":"string"}}
,{"name":"Map2","type":{"type":"map","values":{
				"type": "array",
				"items": "int"
			}}}

				]
			}},"alias":"m3"}

			]
		}`
	_TestServiceServiceEcho2InCoder  coding.Coder
	_TestServiceServiceEcho2OutCoder coding.Coder
)

type _TestServiceServiceEchoIn struct {
	F1  int
	F2  int
	F3  int8
	F4  int16
	F5  int32
	F6  int64
	F7  float32
	F8  float64
	F9  bool
	F10 string
	F11 []int
	F12 []string
	F13 []byte
	F14 TestStruct
	F15 map[string]string
	F16 map[string]int
	F17 map[string]TestStruct
}

type _TestServiceServiceEchoOut struct {
	F1 string
}

type _TestServiceServiceEcho2In struct {
}

type _TestServiceServiceEcho2Out struct {
	F1  int
	F2  int8
	F3  int16
	F4  int32
	F5  int64
	F6  float32
	F7  float64
	F8  bool
	F9  string
	F10 []int
	F11 []string
	F12 []byte
	F13 TestStruct
	F14 map[string]string
	F15 map[string]int
	F16 map[string]TestStruct
}

func init() {
	app.ServiceAppMode = app.Ast

	bService, err := BegoniaCli.Service("Test")
	if err != nil {
		panic(err)
	}

	_TestServiceServiceEcho, err = bService.FuncSync("Echo")

	_TestServiceServiceEchoInCoder, err = coding.NewAvro(_TestServiceServiceEchoInSchema)
	if err != nil {
		panic(err)
	}
	_TestServiceServiceEchoOutCoder, err = coding.NewAvro(_TestServiceServiceEchoOutSchema)
	if err != nil {
		panic(err)
	}

	_TestServiceServiceEcho2, err = bService.FuncSync("Echo2")

	_TestServiceServiceEcho2InCoder, err = coding.NewAvro(_TestServiceServiceEcho2InSchema)
	if err != nil {
		panic(err)
	}
	_TestServiceServiceEcho2OutCoder, err = coding.NewAvro(_TestServiceServiceEcho2OutSchema)
	if err != nil {
		panic(err)
	}

}

func Echo(i1 int, it int, i2 int8, i3 int16, i4 int32, i5 int64, f1 float32, f2 float64, ok bool, str string, s1 []int, s2 []string, s6 []byte, st TestStruct, m1 map[string]string, m2 map[string]int, m3 map[string]TestStruct) (F1 string, err error) {
	var in _TestServiceServiceEchoIn
	in.F1 = i1
	in.F2 = it
	in.F3 = i2
	in.F4 = i3
	in.F5 = i4
	in.F6 = i5
	in.F7 = f1
	in.F8 = f2
	in.F9 = ok
	in.F10 = str
	in.F11 = s1
	in.F12 = s2
	in.F13 = s6
	in.F14 = st
	in.F15 = m1
	in.F16 = m2
	in.F17 = m3

	b, err := _TestServiceServiceEchoInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _TestServiceServiceEcho(b)
	if err != nil {
		return
	}

	var out _TestServiceServiceEchoOut
	err = _TestServiceServiceEchoOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	F1 = out.F1

	return
}

func Echo2() (i1 int, i2 int8, i3 int16, i4 int32, i5 int64, f1 float32, f2 float64, ok bool, str string, s1 []int, s2 []string, s6 []byte, st TestStruct, m1 map[string]string, m2 map[string]int, m3 map[string]TestStruct, err error) {
	var in _TestServiceServiceEcho2In

	b, err := _TestServiceServiceEcho2InCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _TestServiceServiceEcho2(b)
	if err != nil {
		return
	}

	var out _TestServiceServiceEcho2Out
	err = _TestServiceServiceEcho2OutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	i1 = out.F1

	i2 = out.F2

	i3 = out.F3

	i4 = out.F4

	i5 = out.F5

	f1 = out.F6

	f2 = out.F7

	ok = out.F8

	str = out.F9

	s1 = out.F10

	s2 = out.F11

	s6 = out.F12

	st = out.F13

	m1 = out.F14

	m2 = out.F15

	m3 = out.F16

	return
}
