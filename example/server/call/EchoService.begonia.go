// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: server\server.go
// begonia client file

package call

import (
	"github.com/MashiroC/begonia/app"
	appClient "github.com/MashiroC/begonia/app/client"
	"github.com/MashiroC/begonia/app/coding"
)

var (
	EchoServiceService appClient.Service

	_EchoServiceServiceSayHello appClient.RemoteFunSync

	_EchoServiceServiceSayHelloInSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}

			]
		}`
	_EchoServiceServiceSayHelloOutSchema = `
{
			"namespace":"begonia.func.SayHello",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_EchoServiceServiceSayHelloInCoder  coding.Coder
	_EchoServiceServiceSayHelloOutCoder coding.Coder

	_EchoServiceServiceSayHelloWithContext appClient.RemoteFunSync

	_EchoServiceServiceSayHelloWithContextInSchema = `
{
			"namespace":"begonia.func.SayHelloWithContext",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}

			]
		}`
	_EchoServiceServiceSayHelloWithContextOutSchema = `
{
			"namespace":"begonia.func.SayHelloWithContext",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_EchoServiceServiceSayHelloWithContextInCoder  coding.Coder
	_EchoServiceServiceSayHelloWithContextOutCoder coding.Coder

	_EchoServiceServiceAdd appClient.RemoteFunSync

	_EchoServiceServiceAddInSchema = `
{
			"namespace":"begonia.func.Add",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i1"}
,{"name":"F2","type":"int","alias":"i2"}

			]
		}`
	_EchoServiceServiceAddOutSchema = `
{
			"namespace":"begonia.func.Add",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"res"}

			]
		}`
	_EchoServiceServiceAddInCoder  coding.Coder
	_EchoServiceServiceAddOutCoder coding.Coder

	_EchoServiceServiceMod appClient.RemoteFunSync

	_EchoServiceServiceModInSchema = `
{
			"namespace":"begonia.func.Mod",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"int","alias":"i1"}
,{"name":"F2","type":"int","alias":"i2"}

			]
		}`
	_EchoServiceServiceModOutSchema = `
{
			"namespace":"begonia.func.Mod",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"int","alias":"res1"}
,{"name":"F2","type":"int","alias":"res2"}

			]
		}`
	_EchoServiceServiceModInCoder  coding.Coder
	_EchoServiceServiceModOutCoder coding.Coder

	_EchoServiceServiceNULL appClient.RemoteFunSync

	_EchoServiceServiceNULLInSchema = `
{
			"namespace":"begonia.func.NULL",
			"type":"record",
			"name":"In",
			"fields":[
				
			]
		}`
	_EchoServiceServiceNULLOutSchema = `
{
			"namespace":"begonia.func.NULL",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_EchoServiceServiceNULLInCoder  coding.Coder
	_EchoServiceServiceNULLOutCoder coding.Coder
)

type _EchoServiceServiceSayHelloIn struct {
	F1 string
}

type _EchoServiceServiceSayHelloOut struct {
	F1 string
}

type _EchoServiceServiceSayHelloWithContextIn struct {
	F1 string
}

type _EchoServiceServiceSayHelloWithContextOut struct {
	F1 string
}

type _EchoServiceServiceAddIn struct {
	F1 int
	F2 int
}

type _EchoServiceServiceAddOut struct {
	F1 int
}

type _EchoServiceServiceModIn struct {
	F1 int
	F2 int
}

type _EchoServiceServiceModOut struct {
	F1 int
	F2 int
}

type _EchoServiceServiceNULLIn struct {
}

type _EchoServiceServiceNULLOut struct {
}

func init() {
	app.ServiceAppMode = app.Ast

	bService, err := BegoniaCli.Service("Echo")
	if err != nil {
		panic(err)
	}

	_EchoServiceServiceSayHello, err = bService.FuncSync("SayHello")

	_EchoServiceServiceSayHelloInCoder, err = coding.NewAvro(_EchoServiceServiceSayHelloInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceServiceSayHelloOutCoder, err = coding.NewAvro(_EchoServiceServiceSayHelloOutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceServiceSayHelloWithContext, err = bService.FuncSync("SayHelloWithContext")

	_EchoServiceServiceSayHelloWithContextInCoder, err = coding.NewAvro(_EchoServiceServiceSayHelloWithContextInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceServiceSayHelloWithContextOutCoder, err = coding.NewAvro(_EchoServiceServiceSayHelloWithContextOutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceServiceAdd, err = bService.FuncSync("Add")

	_EchoServiceServiceAddInCoder, err = coding.NewAvro(_EchoServiceServiceAddInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceServiceAddOutCoder, err = coding.NewAvro(_EchoServiceServiceAddOutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceServiceMod, err = bService.FuncSync("Mod")

	_EchoServiceServiceModInCoder, err = coding.NewAvro(_EchoServiceServiceModInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceServiceModOutCoder, err = coding.NewAvro(_EchoServiceServiceModOutSchema)
	if err != nil {
		panic(err)
	}

	_EchoServiceServiceNULL, err = bService.FuncSync("NULL")

	_EchoServiceServiceNULLInCoder, err = coding.NewAvro(_EchoServiceServiceNULLInSchema)
	if err != nil {
		panic(err)
	}
	_EchoServiceServiceNULLOutCoder, err = coding.NewAvro(_EchoServiceServiceNULLOutSchema)
	if err != nil {
		panic(err)
	}

}

func SayHello(name string) (F1 string, err error) {
	var in _EchoServiceServiceSayHelloIn
	in.F1 = name

	b, err := _EchoServiceServiceSayHelloInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _EchoServiceServiceSayHello(b)
	if err != nil {
		return
	}

	var out _EchoServiceServiceSayHelloOut
	err = _EchoServiceServiceSayHelloOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	F1 = out.F1

	return
}

func SayHelloWithContext(name string) (F1 string, err error) {
	var in _EchoServiceServiceSayHelloWithContextIn
	in.F1 = name

	b, err := _EchoServiceServiceSayHelloWithContextInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _EchoServiceServiceSayHelloWithContext(b)
	if err != nil {
		return
	}

	var out _EchoServiceServiceSayHelloWithContextOut
	err = _EchoServiceServiceSayHelloWithContextOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	F1 = out.F1

	return
}

func Add(i1 int, i2 int) (res int, err error) {
	var in _EchoServiceServiceAddIn
	in.F1 = i1
	in.F2 = i2

	b, err := _EchoServiceServiceAddInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _EchoServiceServiceAdd(b)
	if err != nil {
		return
	}

	var out _EchoServiceServiceAddOut
	err = _EchoServiceServiceAddOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	res = out.F1

	return
}

func Mod(i1 int, i2 int) (res1 int, res2 int, err error) {
	var in _EchoServiceServiceModIn
	in.F1 = i1
	in.F2 = i2

	b, err := _EchoServiceServiceModInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _EchoServiceServiceMod(b)
	if err != nil {
		return
	}

	var out _EchoServiceServiceModOut
	err = _EchoServiceServiceModOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	res1 = out.F1

	res2 = out.F2

	return
}

func NULL() (err error) {
	var in _EchoServiceServiceNULLIn

	b, err := _EchoServiceServiceNULLInCoder.Encode(in)
	if err != nil {
		panic(err)
	}

	begoniaResTmp, err := _EchoServiceServiceNULL(b)
	if err != nil {
		return
	}

	var out _EchoServiceServiceNULLOut
	err = _EchoServiceServiceNULLOutCoder.DecodeIn(begoniaResTmp.([]byte), &out)
	if err != nil {
		panic(err)
	}

	return
}
