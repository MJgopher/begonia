// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     request.avsc
 */
package bench

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

//type TestReq struct {
//	ReqId string `json:"reqId"`
//
//	Service string `json:"service"`
//
//	Fun string `json:"fun"`
//
//	Params []byte `json:"params"`
//}

const TestReqAvroCRC64Fingerprint = "\xca]\xea\xe8p\x06\xef\x16"

func NewTestReq() *TestReq {
	return &TestReq{}
}

func init() {
	t := NewTestReq()

	var err error
	deser, err = compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		panic(err)
	}
}

var deser *vm.Program

func DeserializeTestReq(r io.Reader) (*TestReq, error) {
	t := NewTestReq()
	var err error

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeTestReqFromSchema(r io.Reader, schema string) (*TestReq, error) {
	t := NewTestReq()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeTestReq(r *TestReq, w io.Writer) error {
	var err error
	err = vm.WriteString(r.ReqId, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Service, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Fun, w)
	if err != nil {
		return err
	}
	err = vm.WriteBytes(r.Params, w)
	if err != nil {
		return err
	}
	return err
}

func (r *TestReq) Serialize(w io.Writer) error {
	return writeTestReq(r, w)
}

func (r *TestReq) Schema() string {
	return "{\"fields\":[{\"name\":\"reqId\",\"type\":\"string\"},{\"name\":\"service\",\"type\":\"string\"},{\"name\":\"fun\",\"type\":\"string\"},{\"name\":\"params\",\"type\":\"bytes\"}],\"name\":\"begonia.entry.TestReq\",\"type\":\"record\"}"
}

func (r *TestReq) SchemaName() string {
	return "begonia.entry.TestReq"
}

func (_ *TestReq) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *TestReq) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *TestReq) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *TestReq) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *TestReq) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *TestReq) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *TestReq) SetString(v string)   { panic("Unsupported operation") }
func (_ *TestReq) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *TestReq) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.ReqId}
	case 1:
		return &types.String{Target: &r.Service}
	case 2:
		return &types.String{Target: &r.Fun}
	case 3:
		return &types.Bytes{Target: &r.Params}
	}
	panic("Unknown field index")
}

func (r *TestReq) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *TestReq) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *TestReq) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *TestReq) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *TestReq) Finalize()                        {}

func (_ *TestReq) AvroCRC64Fingerprint() []byte {
	return []byte(TestReqAvroCRC64Fingerprint)
}
