// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: begonialog\begonialog.go 
// begonia server file

 
 

package centerlog

import (
	"context"
	"errors"
	cRegister "github.com/MashiroC/begonia/core/register"
	"github.com/MashiroC/begonia/app"
	"github.com/MashiroC/begonia/app/coding"
)


var (
	_CenterLogServiceFuncList []cRegister.FunInfo

	
	_CenterLogServiceSaveInSchema  = `
{
			"namespace":"begonia.func.Save",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":{
				"type": "array",
				"items": {
				"type": "record",
				"name": "Msg",
				"fields":[{"name":"ServerName","type":"string"}
,{"name":"Level","type":"int"}
,{"name":"Fields","type":{"type":"map","values":"string"}}
,{"name":"Time","type":"long"}
,{"name":"Callers","type":{
				"type": "array",
				"items": "string"
			}}

				]
			}
			},"alias":"msg"}

			]
		}`
	_CenterLogServiceSaveOutSchema = `
{
			"namespace":"begonia.func.Save",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_CenterLogServiceSaveInCoder   coding.Coder
	_CenterLogServiceSaveOutCoder  coding.Coder

)




 	
type _CenterLogServiceSaveIn struct {
	
		F1 []Msg }

type _CenterLogServiceSaveOut struct {
	
		 
}


func init() {
	app.ServiceAppMode = app.Ast

	var err error
 	
	_CenterLogServiceSaveInCoder, err = coding.NewAvro(_CenterLogServiceSaveInSchema)
	if err != nil {
		panic(err)
	}
	_CenterLogServiceSaveOutCoder, err = coding.NewAvro(_CenterLogServiceSaveOutSchema)
	if err != nil {
		panic(err)
	}


	_CenterLogServiceFuncList = []cRegister.FunInfo{
		 	
			{
				Name: "Save", 
				InSchema: _CenterLogServiceSaveInSchema, 
				OutSchema: _CenterLogServiceSaveOutSchema }, 
		
	}
}

func (d *CenterLogService) Do(ctx context.Context, fun string, param []byte) (result []byte, err error) {
	switch fun { 
 	
	case "Save":
		var in _CenterLogServiceSaveIn
		err = _CenterLogServiceSaveInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}
	
		err := d.Save(
					
					 in.F1, 
					)
		if err!=nil{
			return nil,err
		}
		var out _CenterLogServiceSaveOut
		
		
		res, err := _CenterLogServiceSaveOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil
	

	default:
		err = errors.New("rpc call error: fun not exist")
	}
	return
}

func (d *CenterLogService) FuncList() []cRegister.FunInfo {
	return _CenterLogServiceFuncList
}