// Code generated by Begonia. DO NOT EDIT.
// versions:
// 	Begonia v1.0.2
// source: begonialog\begonialog.go 
// begonia server file

 
 

package centerlog

import (
	"context"
	"errors"
	cRegister "github.com/MashiroC/begonia/core/register"
	"github.com/MashiroC/begonia/app"
	"github.com/MashiroC/begonia/app/coding"
)


var (
	_CenterLogServiceFuncList []cRegister.FunInfo

	
	_CenterLogServiceRegisterLogServiceInSchema  = `
{
			"namespace":"begonia.func.RegisterLogService",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}

			]
		}`
	_CenterLogServiceRegisterLogServiceOutSchema = `
{
			"namespace":"begonia.func.RegisterLogService",
			"type":"record",
			"name":"Out",
			"fields":[
				
			]
		}`
	_CenterLogServiceRegisterLogServiceInCoder   coding.Coder
	_CenterLogServiceRegisterLogServiceOutCoder  coding.Coder

	
	_CenterLogServiceWriteInSchema  = `
{
			"namespace":"begonia.func.Write",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}
,{"name":"F2","type":"bytes","alias":"msg"}

			]
		}`
	_CenterLogServiceWriteOutSchema = `
{
			"namespace":"begonia.func.Write",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"string"}

			]
		}`
	_CenterLogServiceWriteInCoder   coding.Coder
	_CenterLogServiceWriteOutCoder  coding.Coder

	
	_CenterLogServiceGetLogInSchema  = `
{
			"namespace":"begonia.func.GetLog",
			"type":"record",
			"name":"In",
			"fields":[
				{"name":"F1","type":"string","alias":"name"}

			]
		}`
	_CenterLogServiceGetLogOutSchema = `
{
			"namespace":"begonia.func.GetLog",
			"type":"record",
			"name":"Out",
			"fields":[
				{"name":"F1","type":"bytes"}

			]
		}`
	_CenterLogServiceGetLogInCoder   coding.Coder
	_CenterLogServiceGetLogOutCoder  coding.Coder

)




 	
type _CenterLogServiceRegisterLogServiceIn struct {
	
		F1 string }

type _CenterLogServiceRegisterLogServiceOut struct {
	
		 
}
 	
type _CenterLogServiceWriteIn struct {
	
		F1 string 
		F2 []byte }

type _CenterLogServiceWriteOut struct {
	
			F1 string  
		 
}
 	
type _CenterLogServiceGetLogIn struct {
	
		F1 string }

type _CenterLogServiceGetLogOut struct {
	
			F1 []byte  
		 
}


func init() {
	app.ServiceAppMode = app.Ast

	var err error
 	
	_CenterLogServiceRegisterLogServiceInCoder, err = coding.NewAvro(_CenterLogServiceRegisterLogServiceInSchema)
	if err != nil {
		panic(err)
	}
	_CenterLogServiceRegisterLogServiceOutCoder, err = coding.NewAvro(_CenterLogServiceRegisterLogServiceOutSchema)
	if err != nil {
		panic(err)
	}
 	
	_CenterLogServiceWriteInCoder, err = coding.NewAvro(_CenterLogServiceWriteInSchema)
	if err != nil {
		panic(err)
	}
	_CenterLogServiceWriteOutCoder, err = coding.NewAvro(_CenterLogServiceWriteOutSchema)
	if err != nil {
		panic(err)
	}
 	
	_CenterLogServiceGetLogInCoder, err = coding.NewAvro(_CenterLogServiceGetLogInSchema)
	if err != nil {
		panic(err)
	}
	_CenterLogServiceGetLogOutCoder, err = coding.NewAvro(_CenterLogServiceGetLogOutSchema)
	if err != nil {
		panic(err)
	}


	_CenterLogServiceFuncList = []cRegister.FunInfo{
		 	
			{
				Name: "RegisterLogService", 
				InSchema: _CenterLogServiceRegisterLogServiceInSchema, 
				OutSchema: _CenterLogServiceRegisterLogServiceOutSchema }, 
		 	
			{
				Name: "Write", 
				InSchema: _CenterLogServiceWriteInSchema, 
				OutSchema: _CenterLogServiceWriteOutSchema }, 
		 	
			{
				Name: "GetLog", 
				InSchema: _CenterLogServiceGetLogInSchema, 
				OutSchema: _CenterLogServiceGetLogOutSchema }, 
		
	}
}

func (d *CenterLogService) Do(ctx context.Context, fun string, param []byte) (result []byte, err error) {
	switch fun { 
 	
	case "RegisterLogService":
		var in _CenterLogServiceRegisterLogServiceIn
		err = _CenterLogServiceRegisterLogServiceInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}
	
		err := d.RegisterLogService(
					
					 in.F1, 
					)
		if err!=nil{
			return nil,err
		}
		var out _CenterLogServiceRegisterLogServiceOut
		
		
		res, err := _CenterLogServiceRegisterLogServiceOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil
	
 	
	case "Write":
		var in _CenterLogServiceWriteIn
		err = _CenterLogServiceWriteInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}
	
		res1, err := d.Write(
					
					 in.F1,  in.F2, 
					)
		if err!=nil{
			return nil,err
		}
		var out _CenterLogServiceWriteOut
		 out.F1 = res1 
		
		
		res, err := _CenterLogServiceWriteOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil
	
 	
	case "GetLog":
		var in _CenterLogServiceGetLogIn
		err = _CenterLogServiceGetLogInCoder.DecodeIn(param, &in)
		if err != nil {
			panic(err)
		}
	
		res1, err := d.GetLog(
					
					 in.F1, 
					)
		if err!=nil{
			return nil,err
		}
		var out _CenterLogServiceGetLogOut
		 out.F1 = res1 
		
		
		res, err := _CenterLogServiceGetLogOutCoder.Encode(out)
		if err != nil {
			panic(err)
		}
		return res, nil
	

	default:
		err = errors.New("rpc call error: fun not exist")
	}
	return
}

func (d *CenterLogService) FuncList() []cRegister.FunInfo {
	return _CenterLogServiceFuncList
}